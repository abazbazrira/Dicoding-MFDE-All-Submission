// Mocks generated by Mockito 5.1.0 from annotations
// in dicoding_mfde_submission/test/presentation/pages/movie/movie_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:ui' as _i12;

import 'package:dicoding_mfde_submission/common/state_enum.dart' as _i9;
import 'package:dicoding_mfde_submission/domain/entities/movie_tv_show.dart'
    as _i10;
import 'package:dicoding_mfde_submission/domain/entities/movie_tv_show_detail.dart'
    as _i7;
import 'package:dicoding_mfde_submission/domain/usecases/get_detail.dart'
    as _i2;
import 'package:dicoding_mfde_submission/domain/usecases/get_recommendations.dart'
    as _i3;
import 'package:dicoding_mfde_submission/domain/usecases/get_watchlist_status.dart'
    as _i4;
import 'package:dicoding_mfde_submission/domain/usecases/remove_watchlist.dart'
    as _i6;
import 'package:dicoding_mfde_submission/domain/usecases/save_watchlist.dart'
    as _i5;
import 'package:dicoding_mfde_submission/presentation/provider/detail_notifier.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetDetail_0 extends _i1.Fake implements _i2.GetDetail {}

class _FakeGetRecommendations_1 extends _i1.Fake
    implements _i3.GetRecommendations {}

class _FakeGetWatchListStatus_2 extends _i1.Fake
    implements _i4.GetWatchListStatus {}

class _FakeSaveWatchlist_3 extends _i1.Fake implements _i5.SaveWatchlist {}

class _FakeRemoveWatchlist_4 extends _i1.Fake implements _i6.RemoveWatchlist {}

class _FakeMovieTvShowDetail_5 extends _i1.Fake
    implements _i7.MovieTvShowDetail {}

/// A class which mocks [DetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailNotifier extends _i1.Mock implements _i8.DetailNotifier {
  MockDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetDetail get getDetail =>
      (super.noSuchMethod(Invocation.getter(#getDetail),
          returnValue: _FakeGetDetail_0()) as _i2.GetDetail);
  @override
  _i3.GetRecommendations get getRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getRecommendations),
          returnValue: _FakeGetRecommendations_1()) as _i3.GetRecommendations);
  @override
  _i4.GetWatchListStatus get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
          returnValue: _FakeGetWatchListStatus_2()) as _i4.GetWatchListStatus);
  @override
  _i5.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_3()) as _i5.SaveWatchlist);
  @override
  _i6.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_4()) as _i6.RemoveWatchlist);
  @override
  _i7.MovieTvShowDetail get movie =>
      (super.noSuchMethod(Invocation.getter(#movie),
          returnValue: _FakeMovieTvShowDetail_5()) as _i7.MovieTvShowDetail);
  @override
  _i9.RequestState get movieState =>
      (super.noSuchMethod(Invocation.getter(#movieState),
          returnValue: _i9.RequestState.empty) as _i9.RequestState);
  @override
  List<_i10.MovieTvShow> get movieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#movieRecommendations),
          returnValue: <_i10.MovieTvShow>[]) as List<_i10.MovieTvShow>);
  @override
  _i9.RequestState get recommendationState =>
      (super.noSuchMethod(Invocation.getter(#recommendationState),
          returnValue: _i9.RequestState.empty) as _i9.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlist),
          returnValue: false) as bool);
  @override
  String get watchlistMessage =>
      (super.noSuchMethod(Invocation.getter(#watchlistMessage), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i11.Future<void> fetchDetail(int? id, String? type) => (super.noSuchMethod(
      Invocation.method(#fetchDetail, [id, type]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> addWatchlist(_i7.MovieTvShowDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> removeFromWatchlist(_i7.MovieTvShowDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatus, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
